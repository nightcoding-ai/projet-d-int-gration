{"ast":null,"code":"import { partners, products } from \"./dataArrays\";\nexport function getPartnersById(partners_Id) {\n  var partnersData;\n  partners.map(function (data) {\n    if (data.id == partners_Id) {\n      partnersData = data;\n    }\n  });\n  return partnersData;\n}\nexport function getPartnersName(partners_Id) {\n  var name;\n  partners.map(function (data) {\n    if (data.id == partners_Id) {\n      name = data.name;\n    }\n  });\n  return name;\n}\nexport function getProducts(partners_Id) {\n  var productArray = [];\n  products.map(function (data) {\n    if (data.partners_Id == partners_Id) {\n      productArray.push(data);\n    }\n\n    ;\n  });\n  return productArray;\n}\nexport function getNumberProducts(partners_Id) {\n  var count = 0;\n  products.map(function (data) {\n    if (data.partners_Id == partners_Id) {\n      count++;\n    }\n\n    ;\n  });\n  return count;\n}\nexport function getProductsByProductName(productName) {\n  var upperName = productName.toUpperCase();\n  var productArray = [];\n  products.map(function (data) {\n    if (data.productTitle.toUpperCase().includes(upperName)) {\n      productArray.push(data);\n    }\n  });\n  return productArray;\n}\nexport function getProductsByPartnersName(partners_Id) {\n  var upperName = partners_Id.toUpperCase();\n  var productsArray = [];\n  partners.map(function (data) {\n    if (data.name.toUpperCase().includes(upperName)) {\n      var _products = getProducts(data.id);\n\n      _products.map(function (item) {\n        productsArray.push(item);\n      });\n    }\n  });\n  return productsArray;\n}","map":{"version":3,"sources":["E:/integration/projet-dintegration/AppReact/src/data/MockDataAPI.js"],"names":["partners","products","getPartnersById","partners_Id","partnersData","map","data","id","getPartnersName","name","getProducts","productArray","push","getNumberProducts","count","getProductsByProductName","productName","upperName","toUpperCase","productTitle","includes","getProductsByPartnersName","productsArray","item"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,QAAnB;AAEA,OAAO,SAASC,eAAT,CAAyBC,WAAzB,EAAsC;AACzC,MAAIC,YAAJ;AACAJ,EAAAA,QAAQ,CAACK,GAAT,CAAa,UAAAC,IAAI,EAAI;AACjB,QAAIA,IAAI,CAACC,EAAL,IAAWJ,WAAf,EAA4B;AACxBC,MAAAA,YAAY,GAAGE,IAAf;AACH;AACJ,GAJD;AAKA,SAAOF,YAAP;AACH;AAED,OAAO,SAASI,eAAT,CAAyBL,WAAzB,EAAsC;AACzC,MAAIM,IAAJ;AACAT,EAAAA,QAAQ,CAACK,GAAT,CAAa,UAAAC,IAAI,EAAI;AACjB,QAAGA,IAAI,CAACC,EAAL,IAAWJ,WAAd,EAA2B;AACvBM,MAAAA,IAAI,GAAGH,IAAI,CAACG,IAAZ;AACH;AACJ,GAJD;AAKA,SAAOA,IAAP;AACH;AAED,OAAO,SAASC,WAAT,CAAqBP,WAArB,EAAkC;AACrC,MAAMQ,YAAY,GAAG,EAArB;AACAV,EAAAA,QAAQ,CAACI,GAAT,CAAa,UAAAC,IAAI,EAAI;AACjB,QAAIA,IAAI,CAACH,WAAL,IAAoBA,WAAxB,EAAqC;AACjCQ,MAAAA,YAAY,CAACC,IAAb,CAAkBN,IAAlB;AACH;;AAAA;AACJ,GAJD;AAKA,SAAOK,YAAP;AACH;AAED,OAAO,SAASE,iBAAT,CAA2BV,WAA3B,EAAwC;AAC3C,MAAIW,KAAK,GAAG,CAAZ;AACAb,EAAAA,QAAQ,CAACI,GAAT,CAAa,UAAAC,IAAI,EAAI;AACjB,QAAIA,IAAI,CAACH,WAAL,IAAoBA,WAAxB,EAAqC;AACjCW,MAAAA,KAAK;AACR;;AAAA;AACJ,GAJD;AAKA,SAAOA,KAAP;AACH;AAID,OAAO,SAASC,wBAAT,CAAkCC,WAAlC,EAA+C;AAClD,MAAMC,SAAS,GAAGD,WAAW,CAACE,WAAZ,EAAlB;AACA,MAAMP,YAAY,GAAG,EAArB;AACAV,EAAAA,QAAQ,CAACI,GAAT,CAAa,UAAAC,IAAI,EAAG;AAChB,QAAIA,IAAI,CAACa,YAAL,CAAkBD,WAAlB,GAAgCE,QAAhC,CAAyCH,SAAzC,CAAJ,EAAyD;AACrDN,MAAAA,YAAY,CAACC,IAAb,CAAkBN,IAAlB;AACH;AACJ,GAJD;AAKA,SAAOK,YAAP;AACH;AAED,OAAO,SAASU,yBAAT,CAAmClB,WAAnC,EAA+C;AAClD,MAAMc,SAAS,GAAGd,WAAW,CAACe,WAAZ,EAAlB;AACF,MAAMI,aAAa,GAAG,EAAtB;AACAtB,EAAAA,QAAQ,CAACK,GAAT,CAAa,UAAAC,IAAI,EAAI;AACnB,QAAIA,IAAI,CAACG,IAAL,CAAUS,WAAV,GAAwBE,QAAxB,CAAiCH,SAAjC,CAAJ,EAAiD;AAC/C,UAAMhB,SAAQ,GAAGS,WAAW,CAACJ,IAAI,CAACC,EAAN,CAA5B;;AACAN,MAAAA,SAAQ,CAACI,GAAT,CAAa,UAAAkB,IAAI,EAAI;AACnBD,QAAAA,aAAa,CAACV,IAAd,CAAmBW,IAAnB;AACD,OAFD;AAGD;AACF,GAPD;AAQA,SAAOD,aAAP;AACD","sourcesContent":["import { partners, products } from './dataArrays';\r\n\r\nexport function getPartnersById(partners_Id) {\r\n    let partnersData;\r\n    partners.map(data => {\r\n        if (data.id == partners_Id) {\r\n            partnersData = data;\r\n        }\r\n    });\r\n    return partnersData;\r\n}\r\n\r\nexport function getPartnersName(partners_Id) {\r\n    let name;\r\n    partners.map(data => {\r\n        if(data.id == partners_Id) {\r\n            name = data.name;\r\n        }\r\n    });\r\n    return name;\r\n}\r\n\r\nexport function getProducts(partners_Id) {\r\n    const productArray = [];\r\n    products.map(data => {\r\n        if (data.partners_Id == partners_Id) {\r\n            productArray.push(data);\r\n        };\r\n    });\r\n    return productArray;\r\n}\r\n\r\nexport function getNumberProducts(partners_Id) {\r\n    let count = 0;\r\n    products.map(data => {\r\n        if (data.partners_Id == partners_Id) {\r\n            count ++;\r\n        };\r\n    });\r\n    return count;\r\n}\r\n\r\n// Function for search\r\n\r\nexport function getProductsByProductName(productName) {\r\n    const upperName = productName.toUpperCase();\r\n    const productArray = [];\r\n    products.map(data=> {\r\n        if (data.productTitle.toUpperCase().includes(upperName)) {\r\n            productArray.push(data);\r\n        }\r\n    });\r\n    return productArray;\r\n}\r\n\r\nexport function getProductsByPartnersName(partners_Id){\r\n    const upperName = partners_Id.toUpperCase();\r\n  const productsArray = [];\r\n  partners.map(data => {\r\n    if (data.name.toUpperCase().includes(upperName)) {\r\n      const products = getProducts(data.id); // return a vector of products\r\n      products.map(item => {\r\n        productsArray.push(item);\r\n      });\r\n    }\r\n  });\r\n  return productsArray;\r\n}"]},"metadata":{},"sourceType":"module"}